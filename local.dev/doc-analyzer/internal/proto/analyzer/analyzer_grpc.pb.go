// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/analyzer.proto

package analyzer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AnalyzerService_AnalyzeFile_FullMethodName  = "/analyzer.AnalyzerService/AnalyzeFile"
	AnalyzerService_GetWordCloud_FullMethodName = "/analyzer.AnalyzerService/GetWordCloud"
)

// AnalyzerServiceClient is the client API for AnalyzerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис анализа документов
type AnalyzerServiceClient interface {
	AnalyzeFile(ctx context.Context, in *AnalyzeFileRequest, opts ...grpc.CallOption) (*AnalyzeFileResponse, error)
	GetWordCloud(ctx context.Context, in *GetWordCloudRequest, opts ...grpc.CallOption) (*GetWordCloudResponse, error)
}

type analyzerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyzerServiceClient(cc grpc.ClientConnInterface) AnalyzerServiceClient {
	return &analyzerServiceClient{cc}
}

func (c *analyzerServiceClient) AnalyzeFile(ctx context.Context, in *AnalyzeFileRequest, opts ...grpc.CallOption) (*AnalyzeFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyzeFileResponse)
	err := c.cc.Invoke(ctx, AnalyzerService_AnalyzeFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyzerServiceClient) GetWordCloud(ctx context.Context, in *GetWordCloudRequest, opts ...grpc.CallOption) (*GetWordCloudResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWordCloudResponse)
	err := c.cc.Invoke(ctx, AnalyzerService_GetWordCloud_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyzerServiceServer is the server API for AnalyzerService service.
// All implementations must embed UnimplementedAnalyzerServiceServer
// for forward compatibility.
//
// Сервис анализа документов
type AnalyzerServiceServer interface {
	AnalyzeFile(context.Context, *AnalyzeFileRequest) (*AnalyzeFileResponse, error)
	GetWordCloud(context.Context, *GetWordCloudRequest) (*GetWordCloudResponse, error)
	mustEmbedUnimplementedAnalyzerServiceServer()
}

// UnimplementedAnalyzerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnalyzerServiceServer struct{}

func (UnimplementedAnalyzerServiceServer) AnalyzeFile(context.Context, *AnalyzeFileRequest) (*AnalyzeFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeFile not implemented")
}
func (UnimplementedAnalyzerServiceServer) GetWordCloud(context.Context, *GetWordCloudRequest) (*GetWordCloudResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWordCloud not implemented")
}
func (UnimplementedAnalyzerServiceServer) mustEmbedUnimplementedAnalyzerServiceServer() {}
func (UnimplementedAnalyzerServiceServer) testEmbeddedByValue()                         {}

// UnsafeAnalyzerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyzerServiceServer will
// result in compilation errors.
type UnsafeAnalyzerServiceServer interface {
	mustEmbedUnimplementedAnalyzerServiceServer()
}

func RegisterAnalyzerServiceServer(s grpc.ServiceRegistrar, srv AnalyzerServiceServer) {
	// If the following call pancis, it indicates UnimplementedAnalyzerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AnalyzerService_ServiceDesc, srv)
}

func _AnalyzerService_AnalyzeFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyzerServiceServer).AnalyzeFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyzerService_AnalyzeFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyzerServiceServer).AnalyzeFile(ctx, req.(*AnalyzeFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyzerService_GetWordCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWordCloudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyzerServiceServer).GetWordCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyzerService_GetWordCloud_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyzerServiceServer).GetWordCloud(ctx, req.(*GetWordCloudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnalyzerService_ServiceDesc is the grpc.ServiceDesc for AnalyzerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalyzerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "analyzer.AnalyzerService",
	HandlerType: (*AnalyzerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnalyzeFile",
			Handler:    _AnalyzerService_AnalyzeFile_Handler,
		},
		{
			MethodName: "GetWordCloud",
			Handler:    _AnalyzerService_GetWordCloud_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/analyzer.proto",
}
